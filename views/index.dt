extends layout
block extraCss
  style.
    .hidden {
      display: none !important;
    }
block extraJs
  - import iopipe.json.serialize;
  - import std.datetime.systime;
  script.
    var clients = !{model.allClients.serialize};
    var currentTaskId = !{model.currentTask.id};
    var currentTaskStartTime = new Date(!{SysTime(model.currentTask.start).toUnixTime} * 1000);

    function setupProjectList() {
      let clientId = document.getElementById('client-selector').value;
      let curProject = document.getElementById('project-selector').value;
      let firstValue = null;
      document.querySelectorAll('#project-selector option').forEach((opt) => {
        if(opt.getAttribute('data-client') == clientId)
        {
          opt.classList.remove('hidden');
          if(opt.value == curProject || !firstValue)
            firstValue = opt.value;
        }
        else
          opt.classList.add('hidden');
      });
      document.getElementById('project-selector').value = firstValue;
    }

    function setDefaultRate() {
      let clientId = parseInt(document.getElementById('client-selector').value);
      let rateElement = document.getElementById('rate');
      rateElement.value = clients.find(c => c.id == clientId).defaultRate;
    }

    function clientChanged() {
      setupProjectList();
      setDefaultRate();
    }

    function confirmDelete(id) {
      if(confirm(`Delete task id ${id}? this can't be undone!`))
      {
        window.location = `/delete-task?taskid=${id}`;
      }
    }

    function updateElapsedTime()
    {
      let elapsedTimeElement = document.getElementById('elapsed-time')
      let delta = Date.now().valueOf() - currentTaskStartTime.valueOf();
      delta += 500; // round up
      delta = Math.floor(delta / 1000);
      let seconds = ('0' + (delta % 60)).slice(-2);
      delta = Math.floor(delta / 60);
      let minutes = ('0' + (delta % 60)).slice(-2);
      delta = Math.floor(delta / 60);
      let hours = delta;
      elapsedTimeElement.innerText = `${hours}:${minutes}:${seconds}`;
    }

    setupProjectList();
    if(currentTaskId == -1)
      setDefaultRate();
    else
    {
      // set up a timer to tick on screen
      updateElapsedTime();
      setInterval(updateElapsedTime, 1000);
    }

    let startTimeElem = document.getElementById('start');
    if(startTimeElem)
    {
      let fp = flatpickr(document.getElementById('start'),
      {
        enableTime: true,
        enableSeconds: true,
        onChange: (range) => {
          currentTaskStartTime = range[0];
        },
        defaultDate: currentTaskStartTime
      });
      if(fp.mobileInput) {
        fp.mobileInput.setAttribute("step", "any");
      }
    }

      
block content
  - import tracker.db : Rate;
  - import tracker.app : DurationPrinter;
  h2 Task
  form(action="/timing-event", method="POST")
    input(type="hidden", name="taskid", value=(model.currentTask.id))
    .row.mb-3
      .col-md-2
        label.form-label Client
        select.form-select#client-selector(name="client_id", onchange="clientChanged()")
          - foreach(client; model.allClients)
            option(value=(client.id), selected=(client.id == model.currentTask.client_id)) #{client.id} - #{client.name}
      .col-md-2
        label.form-label Project
        select.form-select#project-selector(name="project_id")
          - foreach(project; model.allProjects)
            option(data-client=(project.client_id), value=(project.id), selected=(project.id == model.currentTask.project_id)) #{project.id} - #{project.name}
      .col-md-2
        label.form-label Rate
        input.form-control#rate(name="rate", type="number", step="0.01", value=(model.currentTask.rate.get(Rate(0))))
      .col-md-6
        label.form-label Comment
        input.form-control(type="text", name="comment", placeholder="Enter task comment here", value=(model.currentTask.comment))
    - if(model.currentTask.id != -1)
      .row.mb-3
        .col-md-4
          label.form-label Started at
          input#start.form-control.flatpickr(type="text", name="start")
        .col-md-2
          label.form-label Elapsed
          p
            span#elapsed-time
    - if(model.currentTask.id == -1)
      button.btn.btn-primary(type="submit", name="action", value="start") Start new task
    - else
      .row.mb-3
        .col-md-4
          .btn-group
            button.btn.btn-secondary(type="submit", name="action", value="update") Update
            button.btn.btn-primary(type="submit", name="action", value="stop") Stop and Save
        .col-md-2
        .col-md-2
          button.btn.btn-danger(type="submit", name="action", value="cancel") Cancel
  h2 Task History

  .table-responsive
    table.table.table-striped.table
      thead
        tr
          th id
          th Client
          th Project
          th Rate
          th Start
          th Stop
          th Duration
          th Comment
          th
      tbody
        - foreach(task; model.allTasks)
          tr
            td #{task.id}
            td #{model.clientLookup[task.client_id].name}
            td
              - if(task.project_id.isNull)
                | &nbsp;
              - else
                | #{model.projectLookup[task.project_id.get].name}
            td
              - if(task.rate.isNull)
                | (N/A)
              - else
                | $#{task.rate.get}
            td #{task.start}
            td #{task.stop.get}
            td #{DurationPrinter(task.stop.get - task.start)}
            td #{task.comment}
            td
              .btn-group
                a.btn.btn-primary(href="/edit-task?taskid=#{task.id}") Edit
                button.btn.btn-danger(type="button", onclick="confirmDelete(#{task.id})") Delete

