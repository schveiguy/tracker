extends layout
block extraJs
  - import iopipe.json.serialize;
  - import std.datetime.systime;
  script.
    var clients = !{model.allClients.serialize};
    var currentTaskId = !{model.currentTask.id};
    var currentTaskStartTime = new Date(!{SysTime(model.currentTask.start).toUnixTime} * 1000);

    function clearDefaultComment() {
      let commentElem = document.getElementById('task-comment');
      if (commentElem.getAttribute('data-default-comment') == commentElem.value) {
        commentElem.value = '';
      }
    }

    function setupProjectList() {
      let clientId = document.getElementById('client-selector').value;
      let curProject = document.getElementById('project-selector').value;
      let firstValue = null;
      document.querySelectorAll('#project-selector option').forEach((opt) => {
        if(opt.getAttribute('data-client') == clientId)
        {
          opt.removeAttribute('hidden');
          opt.removeAttribute('disabled');
          if(opt.value == curProject || !firstValue)
            firstValue = opt.value;
        }
        else
        {
          opt.setAttribute('hidden', '');
          opt.setAttribute('disabled', '');
        }
      });
      document.getElementById('project-selector').value = firstValue;
    }

    function clientChanged() {
      setupProjectList();
      clearDefaultComment();
    }

    function confirmDelete(id) {
      if(confirm(`Delete task id ${id}? this can't be undone!`))
      {
        window.location = `/delete-task?taskid=${id}`;
      }
    }

    function updateElapsedTime()
    {
      let elapsedTimeElement = document.getElementById('elapsed-time')
      let delta = Date.now().valueOf() - currentTaskStartTime.valueOf();
      delta += 500; // round up
      delta = Math.floor(delta / 1000);
      let seconds = ('0' + (delta % 60)).slice(-2);
      delta = Math.floor(delta / 60);
      let minutes = ('0' + (delta % 60)).slice(-2);
      delta = Math.floor(delta / 60);
      let hours = delta;
      elapsedTimeElement.innerText = `${hours}:${minutes}:${seconds}`;
    }

    setupProjectList();
    if(currentTaskId != -1)
    {
      // set up a timer to tick on screen
      updateElapsedTime();
      setInterval(updateElapsedTime, 1000);
    }

    let startTimeElem = document.getElementById('start');
    if(startTimeElem)
    {
      let fp = flatpickr(startTimeElem,
      {
        altInput: true,
        dateFormat: 'Z',
        enableTime: true,
        enableSeconds: true,
        onChange: (range) => {
          currentTaskStartTime = range[0];
        },
        defaultDate: currentTaskStartTime
      });
      if(fp.mobileInput) {
        fp.mobileInput.setAttribute("step", "any");
      }
    }

    let datefp = flatpickr(document.getElementById('date-filter'),
    {
      onChange: (range) => {
        document.getElementById('filter-form').submit();
      },
    });
    if(datefp.mobileInput) {
      fp.mobileInput.setAttribute("step", "any");
    }

      
block content
  - import tracker.db : Rate;
  - import tracker.app : DurationPrinter;
  h2 Task
  form(action="/timing-event", method="POST")
    input(type="hidden", name="taskid", value=(model.currentTask.id))
    .row.mb-3
      .col-md-2
        label.form-label Client
        select.form-select#client-selector(name="client_id", onchange="clientChanged()")
          - foreach(client; model.allClients)
            option(value=(client.id), selected=(client.id == model.currentTask.client_id)) #{client.id} - #{client.name}
      .col-md-2
        label.form-label Project
        select.form-select#project-selector(name="project_id", onchange="clearDefaultComment()")
          - foreach(project; model.allProjects)
            option(data-client=(project.client_id), value=(project.id), selected=(project.id == model.currentTask.project_id)) #{project.id} - #{project.name}
      .col-md-6
        label.form-label Comment
        input.form-control#task-comment(type="text", name="comment", placeholder="Enter task comment here", data-default-comment=(model.currentTask.id == -1 ? model.currentTask.comment : ""), value=(model.currentTask.comment))
    - if(model.currentTask.id != -1)
      .row.mb-3
        .col-md-4
          label.form-label Started at
          input#start.form-control.flatpickr(type="text", name="start")
        .col-md-2
          label.form-label Elapsed
          p
            span#elapsed-time
    - if(model.currentTask.id == -1)
      button.btn.btn-primary(type="submit", name="action", value="start") Start new task
    - else
      .row.mb-3
        .col-md-4
          .btn-group
            button.btn.btn-secondary(type="submit", name="action", value="update") Update
            button.btn.btn-primary(type="submit", name="action", value="stop") Stop and Save
        .col-md-2
        .col-md-2
          button.btn.btn-danger(type="submit", name="action", value="cancel") Cancel
  h2 Totals
  form#filter-form(action="/", method="GET")
    .row.mb-3
      .col-md-2
        label.form-label Client
        select.form-select(name="client_id", onchange="this.form.submit()")
          option(value="") (All)
          - foreach(client; model.allClients)
            option(value=(client.id),selected=(client.id == model.client_id)) #{client.id} - #{client.name}
      .col-md-2
        label.form-label Project
        select.form-select(name="project_id", onchange="this.form.submit()")
          option(value="") (All)
          - foreach(project; model.allProjects)
            option(value=(project.id),selected=(project.id == model.project_id)) #{project.id} - #{model.clientLookup[project.client_id].name}:#{project.name}
      .col-md-2
        label.form-label Period
        select.form-select(name="period", onchange="this.form.submit()")
          option(value="all", selected=(model.period == "all")) All
          option(value="year", selected=(model.period == "year")) Year
          option(value="month", selected=(model.period == "month")) Month
          option(value="week", selected=(model.period == "week")) Week
          option(value="day", selected=(model.period == "day")) Day
      .col-md-2
        .form-check
          input#notinvoicedfilter.form-check-input(type="checkbox", name="not_invoiced", value="Y", checked=(model.notInvoiced), onchange="this.form.submit()")
          label.form-check-label(for="notinvoicedfilter") Not Invoiced
      .col-md-2
        label.form-label For date
        input#date-filter.form-control(type="text", name="forDate", value=(model.forDate))
  .row
    .col-md-2 Time spent: #{DurationPrinter(model.totalTimeSpent)}
    .col-md-2 Paid Time spent: #{DurationPrinter(model.totalPaidTime)}
  h2 Details
    button.btn.btn.primary-outline(type="button", data-bs-toggle="collapse", data-bs-target="#stats", aria-expanded="false", aria-controls="stats") &darr;
  div#stats.collapse
    .row
      .col-md-2
        | Total amount:
        b $#{model.totalAmount}
    h3 By Client
    .table-responsive
      table.table.table-striped
        thead
          tr
            th Id
            th Client
            th Time Spent
        tbody
          - foreach(client; model.allClients)
            - if(auto dur = client.id in model.clientTimeSpent)
              tr
                td #{client.id}
                td #{client.name}
                td #{DurationPrinter(*dur)}
    h3 By Project/Rate
    .table-responsive
      table.table.table-striped
        thead
          tr
            th Id
            th Client
            th Project
            th Rate
            th Time Spent
            th Total Amount
        tbody
          - foreach(project; model.allProjects)
            - if(auto rates = project.id in model.projectTimeSpent)
              - foreach(rate; model.allRates)
                - if(auto dur = rate in *rates)
                  tr
                    td #{project.id}
                    td #{model.clientLookup[project.client_id].name}
                    td #{project.name}
                    td $#{rate}
                    td #{DurationPrinter(*dur)}
                    td $#{rate * (*dur)}
    h3 By Rate
    .table-responsive
      table.table.table-striped
        thead
          tr
            th Rate
            th Time Spent
            th Total Amount
        tbody
          - foreach(r; model.allRates)
            - auto dur = model.rateTimeSpent[r];
            tr
              td $#{r}
              td #{DurationPrinter(dur)}
              td $#{r * dur}
    h3 All Tasks
    - import std.datetime.systime;
    .table-responsive
      table.table.table-striped.table
        thead
          tr
            th id
            th Client
            th Project
            th Rate
            th Start
            th Stop
            th Duration
            th Invoice
            th Comment
            th
        tbody
          - foreach(task; model.allTasks)
            - auto project = model.projectLookup[task.project_id];
            tr
              td #{task.id}
              td #{model.clientLookup[task.client_id].name}
              td #{project.name}
              td
                - if(!task.invoiceRate.isNull)
                  | $#{task.invoiceRate.get}
                - else if(project.rate.amount == 0)
                  | (N/A)
                - else
                  | $#{project.rate}
              td.dtelem(data-unixtime="#{SysTime(task.start).toUnixTime}") #{task.start}
              td.dtelem(data-unixtime="#{SysTime(task.start).toUnixTime}") #{task.stop.get}
              td #{DurationPrinter(task.stop.get - task.start)}
              td
                - if(task.invoice_id.isNull)
                  | &nbsp;
                - else
                  a(href="/invoice?invoiceid=#{task.invoice_id.get}") #{model.invoiceLookup[task.invoice_id.get].invoiceNumber}
              td #{task.comment}
              td
                - if(task.invoice_id.isNull)
                  .btn-group
                    a.btn.btn-primary(href="/edit-task?taskid=#{task.id}") Edit
                    button.btn.btn-danger(type="button", onclick="confirmDelete(#{task.id})") Delete
